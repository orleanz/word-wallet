"use strict";

function getWords() {

  var tmp = localStorage.getItem(WORD_LIST_KEY);
  var words;

  if (tmp) {
    words = JSON.parse(tmp);
  } else {
    words = DEFAULT_WORDS;
    localStorage.setItem(WORD_LIST_KEY, JSON.stringify(DEFAULT_WORDS));
  }

  return words;

}


function getUserNames() {

  var tmp = localStorage.getItem(USER_NAMES_KEY);
  var words;

  if (tmp) {
    words = JSON.parse(tmp);
  } else {
    words = DEFAULT_USER_NAMES;
    localStorage.setItem(USER_NAMES_KEY, JSON.stringify(DEFAULT_USER_NAMES));
  }

  return words;

}


var words = getWords();


if (words.length > 0) {
  for (var i = 0; i < words.length; i++) {
    addWord(words[i][0], words[i][1]);
  }
} else {
  alert("word list empty; click reset for default values");
}


var userNames = getUserNames();
for (var i = 0; i < userNames.length; i++) {
  addUserName(userNames[i]);
}

$("#masterSecret").val(localStorage.getItem(MASTER_SECRET_KEY) || "");

document.getElementById("reset").addEventListener("click", function(){
  words = DEFAULT_WORDS;
  saveWords();
  window.location.reload(true);  
}, false);


document.getElementById("import").addEventListener("click", function() {

  var txt = document.getElementById("impText").value;
  if (txt == "") {
    alert("Enter some text in the import field (generated by export button)");
    return;
  }

  var dict;

  try {
    dict = JSON.parse(document.getElementById("impText").value);
  } catch(e) {
    alert("Cannot parse JSON format;\n\nplease use only text created by Export function");
    return;
  }

  words = dict.words;
  userNames = dict.userNames;

  saveWords();
  saveUserNames();

  localStorage.setItem(MASTER_SECRET_KEY, dict.secret);

  alert("Import status: OK");

  window.location.reload(true);

});

document.getElementById("export").addEventListener("click", function() {

  var dict = {
    "words": words,
    "userNames": userNames,
    "secret" : localStorage.getItem(MASTER_SECRET_KEY) || ""
  };

  document.getElementById("expText").value = JSON.stringify(dict);

});


$("#addUserName").click(function() {

  var userName = document.getElementById("userName").value.trim();
  
  if (userName == "") {
    alert("Cannot add empty user name");
    return;
  }

  document.getElementById("userName").value = "";

  if (userNames.indexOf(userName) != -1) {
    alert("User name is already available in the list");
    return;
  }

  addUserName(userName);
  userNames.push(userName);
  saveUserNames();

});


function addUserName(userName) {

  var span = document.createElement("span");

  span.textContent = userName;
  span.title = "click to delete";

  span.style.display = "inline-block";
  span.style.margin = "0.3em";
  span.style.color = 'darkblue';
  span.style.cursor = 'pointer';
  span.style.backgroundColor = "rgb(240,240,240)";
  span.style.padding = "0.3em";
  span.style.whiteSpace = "nowrap";

  $(span).click(function(ev) {

    var ar = [];
    for (var i = 0; i < userNames.length; i++) {
      if (userNames[i] != userName) {
        ar.push(userNames[i]);
      }
    }
    userNames = ar;

    saveUserNames();

    ev.currentTarget.parentNode.removeChild(ev.currentTarget);

  });

  document.getElementById("currentUserNames").appendChild(span);
  document.getElementById("currentUserNames").appendChild(document.createTextNode(" "));

}



$("#add").click(function() {

  var word = document.getElementById("word").value.trim();
  var synonyme = document.getElementById("synonyme").value.trim();

  if (word == "") {
    alert("Cannot add empty word");
    return;
  }

  document.getElementById("word").value = "";
  document.getElementById("synonyme").value = "";

  addWord(word, synonyme);

  words.push([word, synonyme]);

  saveWords();

});


function saveWords() {

  localStorage.setItem(WORD_LIST_KEY, JSON.stringify(words));
  buildWordWalletMenu();

}


function saveUserNames() {

  localStorage.setItem(USER_NAMES_KEY, JSON.stringify(userNames));
  buildWordWalletMenu();

}


$("#saveSecret").click(function() {
  localStorage.setItem(MASTER_SECRET_KEY, $("#masterSecret").val());
  alert("Master Secret saved in Word Wallet settings.\n\n" + 
    "It makes sense to keep copy of this value in some other safe place, like your email account." + 
    " This way, you can recover all passwords if Word Wallet settings are accidentally cleared.");

});


document.getElementById("generateSecret").addEventListener("click", function() {

  var secret = localStorage.getItem(MASTER_SECRET_KEY);

  if (secret) {
    var answer = confirm("Changing Master Secret will make previous auto-passwords invalid. " +
      "\n\nContinue?");
    if (!answer) {
      return;
    }
  }

  var r1 = Math.random().toString(36).substring(2);
  var r2 = Math.random().toString(36).substring(2);
  var r3 = Math.random().toString(36).substring(2);
  
  $("#masterSecret").val(r1 + r2 + r3);
 
}, false);


function addWord(word, synonyme) {

  var span = document.createElement("span");
  if (synonyme) {
    span.textContent = synonyme + ": " + Array(word.length + 1).join("*");    
    span.title = synonyme + ":" + word + "; click to delete";
  } else {
    span.textContent = word;
    span.title = "click to delete";
  }

  span.style.display = "inline-block";
  span.style.margin = "0.3em";
  span.style.color = 'darkblue';
  span.style.cursor = 'pointer';
  span.style.backgroundColor = "rgb(240,240,240)";
  span.style.padding = "0.3em";
  span.style.whiteSpace = "nowrap";

  $(span).click(function(ev) {

    var ar = [];
    for (var i = 0; i < words.length; i++) {
      if (words[i][0] != word) {
        ar.push(words[i]);
      }
    }
    words = ar;
    saveWords();

    ev.currentTarget.parentNode.removeChild(ev.currentTarget);

  });

  document.getElementById("currentWords").appendChild(span);
  document.getElementById("currentWords").appendChild(document.createTextNode(" "));

}